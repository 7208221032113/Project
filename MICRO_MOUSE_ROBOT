#define ROW 5
#define COL 5

struct Node {
  int row, col;
  int f, g, h;
  Node* parent;
  bool obstacle = false;
  bool visited = false;
};

Node grid[ROW][COL];
Node* openList[ROW * COL];
int openListSize = 0;

int abs(int x) { return x < 0 ? -x : x; }

int heuristic(Node* a, Node* b) {
  return abs(a->row - b->row) + abs(a->col - b->col); // Manhattan distance
}

void initGrid() {
  for (int i = 0; i < ROW; i++) {
    for (int j = 0; j < COL; j++) {
      grid[i][j] = {i, j, 0, 0, 0, nullptr};
    }
  }

  // Example obstacles
  grid[1][1].obstacle = true;
  grid[1][2].obstacle = true;
  grid[1][3].obstacle = true;
}

void addToOpenList(Node* node) {
  openList[openListSize++] = node;
}

Node* getLowestF() {
  int minIndex = 0;
  for (int i = 1; i < openListSize; i++) {
    if (openList[i]->f < openList[minIndex]->f) {
      minIndex = i;
    }
  }
  Node* result = openList[minIndex];
  // Remove from open list
  for (int i = minIndex; i < openListSize - 1; i++) {
    openList[i] = openList[i + 1];
  }
  openListSize--;
  return result;
}

bool isValid(int row, int col) {
  return row >= 0 && row < ROW && col >= 0 && col < COL;
}

void reconstructPath(Node* endNode) {
  Serial.println("Path:");
  while (endNode != nullptr) {
    Serial.print("(");
    Serial.print(endNode->row);
    Serial.print(", ");
    Serial.print(endNode->col);
    Serial.print(") <- ");
    endNode = endNode->parent;
  }
  Serial.println();
}

void runAStar(Node* start, Node* goal) {
  start->g = 0;
  start->h = heuristic(start, goal);
  start->f = start->g + start->h;
  addToOpenList(start);

  while (openListSize > 0) {
    Node* current = getLowestF();
    current->visited = true;

    if (current == goal) {
      reconstructPath(goal);
      return;
    }

    int rowDirs[] = {-1, 1, 0, 0};
    int colDirs[] = {0, 0, -1, 1};

    for (int i = 0; i < 4; i++) {
      int newRow = current->row + rowDirs[i];
      int newCol = current->col + colDirs[i];

      if (isValid(newRow, newCol)) {
        Node* neighbor = &grid[newRow][newCol];
        if (neighbor->obstacle || neighbor->visited) continue;

        int tentativeG = current->g + 1;
        if (tentativeG < neighbor->g || neighbor->parent == nullptr) {
          neighbor->parent = current;
          neighbor->g = tentativeG;
          neighbor->h = heuristic(neighbor, goal);
          neighbor->f = neighbor->g + neighbor->h;
          addToOpenList(neighbor);
        }
      }
    }
  }

  Serial.println("No path found.");
}

void setup() {
  Serial.begin(9600);
  initGrid();
  runAStar(&grid[0][0], &grid[4][4]);  // Start to Goal
}

void loop() {
  // Empty loop
}
